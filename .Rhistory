setwd("M:/R")
install.packages("xlsx")
library(xlsx)
library(rJava)
library("xlsx", lib.loc="C:/emacs/R/win-library/3.0")
source('//mvmsan.mvm.ed.ac.uk/SMCMHome/jliao/Win7/Desktop/GitHub/pain_svm/textmining.R')
source('//mvmsan.mvm.ed.ac.uk/SMCMHome/jliao/Win7/Desktop/GitHub/pain_svm/textmining.R')
source('M:/GitHub/TextMining/radomrization.r')
source('M:/GitHub/TextMining/textmining_v3.R')
source('M:/GitHub/TextMining/radomrization.r')
a='abst\n'
a
gsub('\n','',a)
gsub('[\n]','',a)
gsub('\n|\f','',a)
a='asdf\nadsf\n'
gsub('\n|\f','',a)
a='asdf\nadsf\f'
gsub('\n|\f','',a)
cleandata$text[1]
cleandata <- alldata
cleandata$text  <- normalizetext(cleandata$text)
cleandata$text[1]
cleandata <- alldata
source('M:/GitHub/TextMining/textmining_v3.R')
cleandata$text  <- normalizetext(cleandata$text)
cleandata$text[1]
set.seed(1)
newdata<- cleandata[sample(nrow(cleandata)),]
newdata$text[1]
source('M:/GitHub/TextMining/textmining_v3.R')
if (exists("cleandata") == F) cleandata <- preprocessing(alldata)
cleandata <- preprocessing(alldata)
cleandata$text[1]
createDF<- function(cleandata,ml.model='SVM', createwc=T,sparselevel=0.8){
library(tm)
print("-- Start to make corpus from the text")
text.corpus <- Corpus(VectorSource(cleandata$text))
if (createwc == T) createwordcloud(cleandata$flag, text.corpus)
print("-- Start to build Document Term Matrix")
text.dtm <- DocumentTermMatrix(text.corpus, control = list(weighting = weightTfIdf, minWordLength = 3))
text.dtm <- removeSparseTerms(text.dtm, sparselevel)
if (ml.model == "NB") {
print("start to convert counts to 0 or 1")
text.df <- as.data.frame(apply(text.dtm, 2, convert_count))
} else {
text.df <- as.data.frame(as.matrix(text.dtm))
}
text.df$flag <- cleandata$flag
return(text.dtm)
}
createDF<- function(cleandata,ml.model='SVM', createwc=T,sparselevel=0.8){
library(tm)
print("-- Start to make corpus from the text")
text.corpus <- Corpus(VectorSource(cleandata$text))
if (createwc == T) createwordcloud(cleandata$flag, text.corpus)
print("-- Start to build Document Term Matrix")
text.dtm <- DocumentTermMatrix(text.corpus, control = list(weighting = weightTfIdf, minWordLength = 3))
text.dtm <- removeSparseTerms(text.dtm, sparselevel)
if (ml.model == "NB") {
print("start to convert counts to 0 or 1")
text.df <- as.data.frame(apply(text.dtm, 2, convert_count))
} else {
text.df <- as.data.frame(as.matrix(text.dtm))
}
text.df$flag <- cleandata$flag
return(text.df)
}
if (exists("text.df") == F)  text.df <- createDF(cleandata,sparselevel=sparselevel,ml.model=ml.model)
text.df <- createDF(cleandata,sparselevel=sparselevel,ml.model=ml.model)
warnings()
createDF<- function(cleandata,ml.model='SVM', createwc=F,sparselevel=0.8){
library(tm)
print("-- Start to make corpus from the text")
text.corpus <- Corpus(VectorSource(cleandata$text))
if (createwc == T) createwordcloud(cleandata$flag, text.corpus)
print("-- Start to build Document Term Matrix")
text.dtm <- DocumentTermMatrix(text.corpus, control = list(weighting = weightTfIdf, minWordLength = 3))
text.dtm <- removeSparseTerms(text.dtm, sparselevel)
if (ml.model == "NB") {
print("start to convert counts to 0 or 1")
text.df <- as.data.frame(apply(text.dtm, 2, convert_count))
} else {
text.df <- as.data.frame(as.matrix(text.dtm))
}
text.df$flag <- cleandata$flag
return(text.df)
}
if (exists("text.df") == F)  text.df <- createDF(cleandata,sparselevel=sparselevel,ml.model=ml.model)
text.df <- createDF(cleandata,sparselevel=sparselevel,ml.model=ml.model)
cleandata$text[1]
inspect(text.corpus)
text.corpus <- Corpus(VectorSource(cleandata$text))
inspect(text.corpus)
cleandata$text[1]
text[1]
text<-cleandata$text
sparselevel <- 0.7
sparselevel <- 0.7
